import{_ as t,c as e,o as a,a as r}from"./app.f33a4d5b.js";const m=JSON.parse('{"title":"cURL Connector","description":"","frontmatter":{},"headers":[{"level":2,"title":"Operations","slug":"operations","link":"#operations","children":[{"level":3,"title":"Action","slug":"action","link":"#action","children":[]},{"level":3,"title":"Validate","slug":"validate","link":"#validate","children":[]}]},{"level":2,"title":"Configuration","slug":"configuration","link":"#configuration","children":[]}],"relativePath":"connectors/curl.md"}'),o={name:"connectors/curl.md"},d=r(`<h1 id="curl-connector" tabindex="-1">cURL Connector <a class="header-anchor" href="#curl-connector" aria-hidden="true">#</a></h1><p>This connector runs console commands in Windows.</p><h2 id="operations" tabindex="-1">Operations <a class="header-anchor" href="#operations" aria-hidden="true">#</a></h2><h3 id="action" tabindex="-1">Action <a class="header-anchor" href="#action" aria-hidden="true">#</a></h3><p>Perform a single HTTP request.</p><h4 id="params" tabindex="-1">Params <a class="header-anchor" href="#params" aria-hidden="true">#</a></h4><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>url</td><td>The URL of the request.</td></tr><tr><td>method</td><td>The HTTP method of the request (supported methods: PUT, POST, DELETE).</td></tr><tr><td>[headers]</td><td>Headers for the request (multi-value format is <code>headerKey=headerValue</code>).</td></tr><tr><td>[body]</td><td>Body of the request.</td></tr></tbody></table><h3 id="validate" tabindex="-1">Validate <a class="header-anchor" href="#validate" aria-hidden="true">#</a></h3><p>Performs a single HTTP</p><h4 id="params-1" tabindex="-1">Params <a class="header-anchor" href="#params-1" aria-hidden="true">#</a></h4><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>url</td><td>The URL of the request.</td></tr><tr><td>method</td><td>The HTTP method of the request (supported methods: PUT, POST, DELETE).</td></tr><tr><td>statusCode</td><td>Expected status code of the response (e.g. 404).</td></tr><tr><td>responseBody</td><td>Expected response body as a JSON string.</td></tr><tr><td>[headers]</td><td>Headers for the request (multi-value format is <code>headerKey=headerValue</code>).</td></tr><tr><td>[body]</td><td>Body of the request.</td></tr></tbody></table><div class="info custom-block"><p class="custom-block-title">Note</p><p>PATCH is also supported, but will send a X-HTTP-Method-Override header instead of using the PATCH verb.</p></div><div class="info custom-block"><p class="custom-block-title">Note</p><p>Either one of statusCode or responseBody is required for Validate to work.</p></div><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-hidden="true">#</a></h2><p>The connector can be configured to accept all certificates if using HTTPS:</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki"><code><span class="line"><span style="color:#81A1C1;">&lt;trust-all-certs&gt;</span><span style="color:#D8DEE9FF;">true</span><span style="color:#81A1C1;">&lt;/trust-all-certs&gt;</span></span>
<span class="line"></span></code></pre></div>`,16),s=[d];function n(i,c,l,h,p,u){return a(),e("div",null,s)}const T=t(o,[["render",n]]);export{m as __pageData,T as default};
