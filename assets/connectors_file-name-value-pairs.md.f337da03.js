import{_ as a,c as e,o as s,a as t}from"./app.73871be4.js";const y=JSON.parse('{"title":"Name Value Pairs (Properties) File Connector","description":"","frontmatter":{},"headers":[{"level":2,"title":"Operations","slug":"operations","link":"#operations","children":[{"level":3,"title":"ValidateNameValuePairsFile","slug":"validatenamevaluepairsfile","link":"#validatenamevaluepairsfile","children":[]}]},{"level":2,"title":"Configuration","slug":"configuration","link":"#configuration","children":[]}],"relativePath":"connectors/file-name-value-pairs.md"}'),n={name:"connectors/file-name-value-pairs.md"},l=t(`<h1 id="name-value-pairs-properties-file-connector" tabindex="-1">Name Value Pairs (Properties) File Connector <a class="header-anchor" href="#name-value-pairs-properties-file-connector" aria-hidden="true">#</a></h1><p>The Name Value Pairs File Connector extends the DTFConnector adding a method to validate values of name-value pairs in a file from IdMUnit tests.</p><h2 id="operations" tabindex="-1">Operations <a class="header-anchor" href="#operations" aria-hidden="true">#</a></h2><h3 id="validatenamevaluepairsfile" tabindex="-1">ValidateNameValuePairsFile <a class="header-anchor" href="#validatenamevaluepairsfile" aria-hidden="true">#</a></h3><p>Validates values from the most recently modified file.</p><h4 id="params" tabindex="-1">Params <a class="header-anchor" href="#params" aria-hidden="true">#</a></h4><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>FileContents</td><td>The format of FileContents should be as follows:</td></tr></tbody></table><table><thead><tr><th>FileContents</th></tr></thead><tbody><tr><td>Name1=Value1</td></tr><tr><td>Name2=Value2</td></tr><tr><td>Name3=Value3</td></tr><tr><td>Name3=Value3.1</td></tr></tbody></table><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-hidden="true">#</a></h2><p>To configure this connector you need to specify a read-path, write-path, delimiter, and field-names.</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki"><code><span class="line"><span style="color:#81A1C1;">&lt;connection&gt;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">&lt;name&gt;</span><span style="color:#D8DEE9FF;">NVPF</span><span style="color:#81A1C1;">&lt;/name&gt;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">&lt;description&gt;</span><span style="color:#D8DEE9FF;">Connector to output of DTF driver in properties file format</span><span style="color:#81A1C1;">&lt;/description&gt;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">&lt;type&gt;</span><span style="color:#D8DEE9FF;">com.trivir.idmunit.connector.FileNameValuePairsConnector</span><span style="color:#81A1C1;">&lt;/type&gt;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">&lt;read-path&gt;</span><span style="color:#D8DEE9FF;">/var/opt/novell/IdM/input-files</span><span style="color:#81A1C1;">&lt;/read-path&gt;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">&lt;write-path&gt;</span><span style="color:#D8DEE9FF;">/var/opt/novell/IdM/output-files</span><span style="color:#81A1C1;">&lt;/write-path&gt;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">&lt;delimiter&gt;</span><span style="color:#D8DEE9FF;">,</span><span style="color:#81A1C1;">&lt;/delimiter&gt;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">&lt;field-names&gt;</span><span style="color:#D8DEE9FF;">USER ID, Name, FirstName, LastName, Group, Role</span><span style="color:#81A1C1;">&lt;/field-names&gt;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">&lt;multiplier/&gt;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">&lt;substitutions/&gt;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">&lt;data-injections/&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;/connection&gt;</span></span>
<span class="line"></span></code></pre></div>`,11),o=[l];function r(i,p,c,d,h,u){return s(),e("div",null,o)}const F=a(n,[["render",r]]);export{y as __pageData,F as default};
